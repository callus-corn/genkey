use std::fs::File;
use std::io::{stdout, Write};
use clap::{Parser, ArgEnum};
use genkey::{DER, PEM, PKCS8, SSH, Ed25519, RSA2048};

#[derive(Parser)]
#[clap(
    name = "genkey",
    author = "Yamazaki Mitsufumi",
    version = "v1.0.0",
    about = "generate key of rsa or ed25519"
)]
struct Args {
    //filename to save the key
    #[clap(short, long)]
    file: Option<String>,

    //key type. rsa or ed25519
    #[clap(short = 't', long = "type", arg_enum, default_value = "rsa")]
    algorithm: Algorithm,

    //key format. pkcs8 or ssh
    #[clap(short = 'u', long = "use", arg_enum, default_value = "ssh")]
    format: Format,
}

#[derive(ArgEnum, Clone)]
enum Algorithm {
    RSA,
    Ed25519,
}

#[derive(ArgEnum, Clone)]
enum Format {
    SSH,
    TLS,
}

fn main() {
    let args = Args::parse();

    let out = match (args.format, args.algorithm) {
        (Format::SSH, Algorithm::RSA) => SSH::new(&RSA2048::from_private_key(
            vec![0x00,0xf6,0x95,0xe9,0x45,0x05,0x0b,0x6d,0x99,0xb4,0xee,0x47,0x1c,0xf7,0x77,0xe9,0x3f,0xbe,0x5a,0xd0,0x1c,0x78,0xcc,0x15,0x9d,0xc5,0x2a,0xbb,0x98,0xec,0xb1,0x06,0x2b,0xd4,0xff,0xfa,0x31,0xd1,0x49,0x55,0xe0,0x0d,0x26,0xc9,0x7e,0xe0,0x8f,0xe8,0xd7,0x3d,0xec,0x90,0xa6,0x91,0xcd,0x47,0x4b,0x8e,0x24,0xb9,0xeb,0xc4,0x68,0x87,0x2e,0xb1,0x8c,0x2d,0x24,0x9e,0xc8,0xe7,0x33,0x2a,0xc4,0xdf,0xbe,0x79,0x69,0x10,0xcb,0x0e,0xe5,0xbf,0x2c,0x19,0x34,0x17,0xa4,0xe8,0x6f,0x4c,0xe8,0xa2,0xf8,0xbe,0x2b,0xd3,0xd8,0x91,0xfc,0x40,0xb6,0x5f,0x6f,0xb0,0xe4,0x79,0xb2,0x9d,0x42,0xc6,0x38,0x71,0xa0,0x65,0xd1,0x84,0x76,0xbc,0x15,0x67,0xb3,0x82,0x6f,0xbc,0x24,0xc8,0xff,0x13,0x82,0x65,0xd1,0xf5,0x69,0x11,0xc3,0x6a,0x16,0xbd,0x9e,0x06,0xa3,0x03,0xfe,0x47,0xf9,0x9f,0x16,0x4a,0x21,0x42,0x40,0xd6,0x7f,0x6f,0x70,0xaa,0x68,0xd6,0x6b,0xf2,0x62,0x38,0x2a,0x85,0xae,0x04,0x92,0x02,0x27,0xf7,0x97,0xd1,0x4f,0xe0,0x61,0xcd,0x0c,0xe1,0x90,0x04,0x1f,0xcf,0x97,0xa8,0x18,0x9a,0x9a,0xfe,0xe7,0xee,0x2d],
            vec![0x00,0xf4,0xdd,0xe1,0x52,0xa8,0xb4,0xfa,0x77,0xd5,0xda,0x4b,0xee,0xe2,0xe9,0xfd,0xc4,0xef,0x07,0x14,0x21,0xab,0x9b,0x91,0x00,0x4e,0x2b,0x71,0x0d,0x9e,0x44,0x0f,0x26,0x8f,0x94,0x09,0xe8,0x7a,0x4f,0x47,0x19,0xb8,0x83,0xb1,0xad,0xaa,0xab,0x67,0x7e,0x21,0xd0,0x80,0xc0,0x35,0x9c,0xd3,0x4a,0xdf,0x11,0xf8,0xbb,0x1b,0xf1,0x4d,0xaf,0xb7,0x93,0x83,0x7b,0xc9,0xca,0xea,0xb6,0x72,0x75,0x6b,0x91,0x5e,0x08,0x5c,0x42,0xa2,0x09,0xc0,0x21,0xbc,0x20,0x9e,0x88,0x61,0x6a,0xdf,0x4e,0x3f,0x89,0x6d,0x00,0x83,0x66,0x28,0x30,0x35,0x74,0x84,0xcc,0x32,0x4f,0x32,0x71,0xcf,0x6e,0xff,0x69,0xba,0x8e,0xbf,0x99,0x82,0x5a,0x03,0x24,0x14,0xbd,0xe2,0xfa,0x4e,0x94,0x9c,0x9b,0x70,0x4e,0x29,0x1c,0x9a,0xa2,0x1c,0x03,0x61,0x2a,0x6f,0x00,0xe1,0xb1,0x1c,0xc7,0x6f,0x84,0x87,0xcf,0xb0,0x02,0x2a,0x70,0xe1,0x5b,0x76,0x00,0x02,0x4d,0x0f,0x48,0xcc,0xed,0x72,0x76,0x3b,0x51,0x5c,0xba,0xb5,0xaf,0xe2,0xd4,0x97,0xb3,0xab,0x96,0x01,0xc9,0xdf,0x3a,0xa0,0x9e,0xe3,0x76,0xb7,0xd1,0x2c,0xcd,0xa4,0x4e,0x15,0xf7],
        )).pem(),
        (Format::SSH, Algorithm::Ed25519) => SSH::new(&Ed25519::from_private_key(vec![0xfb,0x87,0x53,0xe9,0x45,0x85,0x8a,0x06,0xc5,0xb2,0xd3,0x38,0xb7,0xc5,0xcb,0x4a,0x04,0x5c,0x2f,0x60,0xc3,0xb8,0x1c,0x30,0x37,0x49,0x4e,0xf9,0x74,0x7e,0xf5,0xda])).pem(),
        (Format::TLS, Algorithm::RSA) => PKCS8::new(PKCS8::V1, RSA2048::ID.to_vec(), RSA2048::new().der()).der().pem(),
        (Format::TLS, Algorithm::Ed25519) => PKCS8::new(PKCS8::V1, Ed25519::ID.to_vec(), Ed25519::new().der()).der().pem(),
    };

    match args.file {
        Some(x) => File::create(x).unwrap().write_all(&out).unwrap(),
        None => stdout().write_all(&out).unwrap(),
    };
}
